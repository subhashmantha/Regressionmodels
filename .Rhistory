install.packages("knitr")
file <- "C:/Rdirect/questionthree.xlsx"
data <- read.xlsx(file,sheetIndex = 1, header = T)
install.packages("xlsx")
library(xlsx)
data <- read.xlsx(file,sheetIndex = 1, header = T)
install.packages("xlsx")
install.packages("rJava")
args(read.xlsx)
library(rJava)
library(xlsx)
install.packages("xlsxjars")
install.packages("xlsxjars")
install.packages(c("xlsxjars","xlsx","rJava"))
libray(c("xlsxjars","xlsx","rJava"))
library(c("xlsxjars","xlsx","rJava"))
library(xlsxjars)
library(rJava)
library(xlsxjars)
library(xlsx)
args(read.xlsx)
file <- "C:/Rdirect/questionthree.xlsx"
data <- read.xlsx(file, sheetIndex = 1)
data
dat <- read.xlsx(file, sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
library(XML)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(file,useInternal = T)
doc <- xmlTreeParse(file,useInternal = F)
file <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(file,useInternal = T)
doc
xmlroot(doc)
xmlRoot(doc)
xmlroot <- xmlRoot(doc)
xmlname(xmlroot)
xmlName(xmlroot)
names(xmlroot)
names(xmlroot$row)
xmlroot[1]
xmlroot[[1]]
xmlroot[[1]][[2]]
xmlroot[[1]][[2]][[2]]
xmlroot[[1]][[]][[2]]
xmlroot[[1]][[1:1327]][[2]]
xmlSApply(xmlroot,xmlValue)
xmlSApply(xmlroot,"//zipcode",xmlValue)
xmlSApply(xmlroot,"///zipcode",xmlValue)
xmlSApply(xmlroot,"//name",xmlValue)
xmlSApply(xmlroot,"//row",xmlValue)
xpathSApply(xmlroot,"//zipcode",xmlValue)
zipcodes <-xpathSApply(xmlroot,"//zipcode",xmlValue)
args(count)
zipcodes[zipcodes == "21231"]
r <- zipcodes[zipcodes == "21231"]
nrow(r)
ncol(r)
nobs(r)
clear(0)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
file
download.file(file)
download.file(file, destfile = "C:/Rdirect/question4.cvs")
?fread
??fread
install.packages("data.table")
args(fread)
library(data.table)
args(fread)
DT <- fread(C:/Rdirect/question5.cvs)
DT <- fread("C:/Rdirect/question5.cvs")
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15, by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(c(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(c(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2]))
class(DT)
install.packages("swirl")
library(swirl)
swwirl()
swirl()
1:20
pi:10
15:1
?:
?":"
?':'
?`:`
seq(1,20)
seq(0,10, by = .5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,40)
rep(0,times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
install.packages("swirl")
library(swirl)
swirl()
num_vect <- c(.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"Mureese")
my_name
paste(my_name, collapse = " ")
paste("Hello","world", sep = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep ="")
paste(LETTERS,1:4, sep = "-")
install.packages("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myvector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
matrix(1:20,nrow = 4, ncol = 5)
myMatrix2 <- matrix(1:20,nrow = 4, ncol = 5)
identical(myMatrix,myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData) <- cnames
myData
c(44,NA,5,NA)
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
myData <- sample(c(y,z),100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
directory <- "specdata"
pollutant <- "nitrate"
id <- 23
paste("C:/Rdirect",sprintf("/%s/%03i.csv",directory,id),sep="")
filename <- paste("C:/Rdirect",sprintf("/%s/%03i.csv",directory,id),sep="")
data <- read.csv(filename)
paste("data$",pollutant, sep = "")
data1 <- paste("data$",pollutant, sep = "")
mean(data1, na.rm = T)
mean(data$nitrate, na.rm = T)
mean(data$paste(pollutant), na.rm = T)
get(data1)
sum(data1)
mean(paste("data$",pollutant, sep = ""), na.rm = T)
class(data$nitrate)
mean(as.numeric(data1), na.rm = T)
class(data1)
data2 <- as.numeric(data1)
data2
took <- if("pollutant" == "nitrate") {}
took <- if("pollutant" == "nitrate") {mean <- mean(data$nitrate, na.rm = T)}
took
took <- if("pollutant" == "nitrate") {mean(data$nitrate, na.rm = T)}
took
took <- if(pollutant == "nitrate") {mean(data$nitrate, na.rm = T)}
took
took <- if(pollutant == "sulfate") {mean(data$sulfate, na.rm = T)}
pollutant <- "sulfate"
took
pollutant <- "nitrate"
took
took <- if(pollutant == "nitrate") {mean(data$nitrate, na.rm = T)}
took <- if(pollutant == "nitrate") {mean(data$nitrate, na.rm = T)} else {mean(data$sulfate, na.rm = T)}
pollutant <- "sulfate"
took <- if(pollutant == "nitrate") {mean(data$nitrate, na.rm = T)} else {mean(data$sulfate, na.rm = T)}
install.packages("RMySQL", type = "source")
libary(RMySQL)
library(RMySQL)
install.packages("sqldf")
library("sqldf")
install.packages("sqldf")
install.packages("sqldf",T)
install.packages("tcltk")
library("tcltk")
ls("package:tcltk")
?grep
library("kernlab", lib.loc="C:/Users/Mureese/Documents/R/win-library/3.0")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.0.3/library")
library(caret)
install.packages('caret')
library(caret)
data(spam)
iTrain <- createDataPartition(y=spam$type,p=.75, list = F)
train <- spam[iTrain,]
test <- spam[-iTrain,]
dim(train)
set.seed(32343)
modelfit <- train(type~.,train, method = 'glm')
modelfit <- train(type~.,data = train, method = 'glm')
modelfit <- train(type~.,data = train, method = "glm")
?train
modelfit <- train(type,data = train, method = "glm")
modelfit <- train(type~,data = train, method = "glm")
modelfit <- train(type~.,data = train, method = "glm")
install.packages('e1071')
library(e1071)
modelfit <- train(type~.,data = train, method = "glm")
modelfit
modelfit$finalModel
predictions <- predict(modelfit,newdata=test)
predictions
confusionMatrix(preductions,test$type)
confusionMatrix(predictions,test$type)
install.packages('ISLR')
library(ISLR)
data(Wage)
data(wage)
Wage
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=.7,list=F)
train <- Wage[inTrain,]
test <- Wage[-inTrain,]
dim(train)
rm(test)
rm(train)
rm(spam)
rm(modelfit)
rm(predictions)
rm(iTrain)
train <- Wage[inTrain,]
test <- Wage[-inTrain,]
dim(train);dim(test)
featureplot(x=train[,c("age","education","jobclass")],y=train$wage,plot ="pairs")
featurePlot(x=train[,c("age","education","jobclass")],y=train$wage,plot ="pairs")
args(qplot)
qplot(x=age,y=wage,data=train)
qplot(x=age,y=wage,data=train,colour='education')
qplot(x=age,y=wage,data=train,colour='age')
qplot(x=age,y=wage,data=train,colour=age)
qplot(x=age,y=wage,data=train,colour=education)
qplot(x=age,y=wage,data=train,colour=jobclass)
qplot(x=age,y=wage,data=train,colour=jobclass)
qq <- qplot(x=age,y=wage,data=train,colour=jobclass)
qq + geom_smooth(method='lm',formula=y~x)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
rm(Wage)
rm(inTrain)
rm(test)
rm(train)
rm(qq)
data(AlzheimerDisease)
predictors
View(predictors)
View(diagnosis)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
rm(predictors)
rm(diagnosis)
hist(training$SuperPlasticizer)
View(training)
class(training$SuperPlasticizer)
class(training[,6])
class(training$Superplasticizer)
hist(training$Superplasticizer)
setwd('C:/Rdirect/regressionmodels')
View('Transmission.Rmd')
